type Category {
  id: ID!
  names: JSON!
}

input CategoryInput {
  names: JSON!
}

type Collection {
  id: ID!
  names: JSON!
}

input CollectionInput {
  names: JSON!
}

type Design {
  categoryIds: [ID!]!
  description: JSON!
  details: JSON!
  id: ID!
  names: JSON!
}

input DesignInput {
  categoryIds: [ID!]!
  description: JSON!
  details: JSON!
  names: JSON!
}

scalar JSON

type Mutation {
  createCategory(input: CategoryInput!): Category
  createCollection(input: CollectionInput!): Collection
  createDesign(input: DesignInput!): Design
  createPiece(input: PieceInput!): Piece
  pingMutation: String
}

type Piece {
  collectionId: ID
  designId: ID!
  id: ID!
  imageFileNames: [String!]!
  serialNumber: Int!
}

input PieceInput {
  collectionId: ID
  designId: ID!
  imageFileNames: [String!]!
}

type ProductsData {
  categories: [Category!]!
  collections: [Collection!]!
  designs: [Design!]!
  pieces: [Piece!]!
}

type Query {
  allProducts: ProductsData!
  pingQuery: String
}